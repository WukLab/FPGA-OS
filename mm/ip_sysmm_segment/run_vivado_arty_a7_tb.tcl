#*****************************************************************************************
# Vivado (TM) v2018.2 (64-bit)
#
# run_vivado_sys_tb.tcl: Tcl script for re-creating project 'mm_sys_mm'
#
# Generated by Vivado on Wed Mar 13 20:41:38 EDT 2019
# IP Build 2256618 on Thu Jun 14 22:10:49 MDT 2018
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (run_vivado_sys_tb.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
# 3. The following remote source files that were added to the original project:-
#
#    "/root/Github/FPGA/mm/sys/top.xdc"
#    "/root/Github/FPGA/mm/sys/tb/wiredly.v"
#    "/root/Github/FPGA/mm/sys/tb/ddr3_model_parameters.vh"
#    "/root/Github/FPGA/mm/sys/tb/ddr3_model.sv"
#    "/root/Github/FPGA/mm/sys/tb/sim_tb_top.v"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "mm_sys_mm"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "run_vivado_sys_tb.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/generated_tb"]"

# Create project
create_project -force ${_xil_proj_name_} "./generated_tb" -part xc7a100tcsg324-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.uses_pr" -value "1" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "19" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "19" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "19" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "19" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "19" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "19" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "19" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "25" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../../generated_ip"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../../generated_ip/mm_axi_wrapper_arty_a7/src/translator.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset object
#set obj [get_filesets sources_1]
#set files [list \
# [file normalize "${origin_dir}/../../generated_ip/mm_sys_arty_a7/component.xml"] \
#]
#add_files -norecurse -fileset $obj $files

# Import local files from the original project
#set files [list \
# [file normalize "${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm/hdl/sys_mm_wrapper.v" ]\
# [file normalize "${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm_tb/ip/sys_mm_tb_mig_7series_0_0/mig_a.prj" ]\
# [file normalize "${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm_tb/hdl/sys_mm_tb_wrapper.v" ]\
#]
#set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
#set file "$origin_dir/../../generated_ip/mm_sys_arty_a7/component.xml"
#set file [file normalize $file]
#set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
#set_property -name "file_type" -value "IP-XACT" -objects $file_obj
#
#
## Set 'sources_1' fileset file properties for local files
#set file "sys_mm_tb_mig_7series_0_0/mig_a.prj"
#set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
#set_property -name "scoped_to_cells" -value "sys_mm_tb_mig_7series_0_0" -objects $file_obj

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "sys_mm_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/top.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/top.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a100tcsg324-1" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/tb/wiredly.v"] \
 [file normalize "${origin_dir}/tb/ddr3_model_parameters.vh"] \
 [file normalize "${origin_dir}/tb/ddr3_model.sv"] \
 [file normalize "${origin_dir}/tb/sim_tb_top.v"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
#set files [list \
# [file normalize "${origin_dir}/generated_tb/sim_tb_top_behav.wcfg" ]\
#]
#set imported_files [import_files -fileset sim_1 $files]

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/tb/ddr3_model_parameters.vh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

set file "$origin_dir/tb/ddr3_model.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "sim_tb_top" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj


# Adding sources referenced in BDs, if not already added
if { [get_files translator.v] == "" } {
  import_files -quiet -fileset sources_1 ../../generated_ip/mm_axi_wrapper_arty_a7/src/translator.v
}


# Proc to create BD sys_mm
proc cr_bd_sys_mm { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# translation_simple



  # CHANGE DESIGN NAME HERE
  set design_name sys_mm

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  wuklab:user:axi_mmu_wrapper_sync:1.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  translation_simple\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set m_axi_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 m_axi_0 ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {32} \
   CONFIG.CLK_DOMAIN {sys_mm_s_axi_clk_0} \
   CONFIG.DATA_WIDTH {128} \
   CONFIG.HAS_QOS {0} \
   CONFIG.HAS_REGION {0} \
   CONFIG.NUM_READ_OUTSTANDING {2} \
   CONFIG.NUM_WRITE_OUTSTANDING {2} \
   CONFIG.PROTOCOL {AXI4} \
   ] $m_axi_0
  set s_axi_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_0 ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {32} \
   CONFIG.ARUSER_WIDTH {1} \
   CONFIG.AWUSER_WIDTH {1} \
   CONFIG.BUSER_WIDTH {1} \
   CONFIG.CLK_DOMAIN {sys_mm_s_axi_clk_0} \
   CONFIG.DATA_WIDTH {128} \
   CONFIG.HAS_BRESP {1} \
   CONFIG.HAS_BURST {1} \
   CONFIG.HAS_CACHE {1} \
   CONFIG.HAS_LOCK {1} \
   CONFIG.HAS_PROT {1} \
   CONFIG.HAS_QOS {0} \
   CONFIG.HAS_REGION {0} \
   CONFIG.HAS_RRESP {1} \
   CONFIG.HAS_WSTRB {1} \
   CONFIG.ID_WIDTH {4} \
   CONFIG.MAX_BURST_LENGTH {256} \
   CONFIG.NUM_READ_OUTSTANDING {2} \
   CONFIG.NUM_READ_THREADS {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {2} \
   CONFIG.NUM_WRITE_THREADS {1} \
   CONFIG.PROTOCOL {AXI4} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.RUSER_BITS_PER_BYTE {0} \
   CONFIG.RUSER_WIDTH {1} \
   CONFIG.SUPPORTS_NARROW_BURST {1} \
   CONFIG.WUSER_BITS_PER_BYTE {0} \
   CONFIG.WUSER_WIDTH {1} \
   ] $s_axi_0

  # Create ports
  set s_aresetn_0 [ create_bd_port -dir I -type rst s_aresetn_0 ]
  set s_axi_clk_0 [ create_bd_port -dir I -type clk s_axi_clk_0 ]
  set_property -dict [ list \
   CONFIG.ASSOCIATED_BUSIF {s_axi_0:m_axi_0} \
 ] $s_axi_clk_0

  # Create instance: axi_mmu_wrapper_sync_0, and set properties
  set axi_mmu_wrapper_sync_0 [ create_bd_cell -type ip -vlnv wuklab:user:axi_mmu_wrapper_sync:1.0 axi_mmu_wrapper_sync_0 ]
  set_property -dict [ list \
   CONFIG.AR_BUF_SZ {16} \
   CONFIG.AW_BUF_SZ {16} \
   CONFIG.AXI_ARUSER_WIDTH {1} \
   CONFIG.AXI_AWUSER_WIDTH {1} \
   CONFIG.AXI_BUSER_WIDTH {1} \
   CONFIG.AXI_DATA_WIDTH {128} \
   CONFIG.AXI_ID_WIDTH {4} \
   CONFIG.AXI_RUSER_WIDTH {1} \
   CONFIG.AXI_STRB_WIDTH {16} \
   CONFIG.AXI_WUSER_WIDTH {1} \
 ] $axi_mmu_wrapper_sync_0

  # Create instance: translation_simple_0, and set properties
  set block_name translation_simple
  set block_cell_name translation_simple_0
  if { [catch {set translation_simple_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $translation_simple_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create interface connections
  connect_bd_intf_net -intf_net axi_mmu_wrapper_sync_0_m_axi [get_bd_intf_ports m_axi_0] [get_bd_intf_pins axi_mmu_wrapper_sync_0/m_axi]
  connect_bd_intf_net -intf_net s_axi_0_1 [get_bd_intf_ports s_axi_0] [get_bd_intf_pins axi_mmu_wrapper_sync_0/s_axi]

  # Create port connections
  connect_bd_net -net axi_mmu_wrapper_sync_0_start_rd_translation [get_bd_pins axi_mmu_wrapper_sync_0/start_rd_translation] [get_bd_pins translation_simple_0/rstart]
  connect_bd_net -net axi_mmu_wrapper_sync_0_start_wr_translation [get_bd_pins axi_mmu_wrapper_sync_0/start_wr_translation] [get_bd_pins translation_simple_0/wstart]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_addr [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_addr] [get_bd_pins translation_simple_0/v_raddr]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_len [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_len] [get_bd_pins translation_simple_0/r_len]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_size [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_size] [get_bd_pins translation_simple_0/r_size]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_addr [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_addr] [get_bd_pins translation_simple_0/v_waddr]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_len [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_len] [get_bd_pins translation_simple_0/w_len]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_size [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_size] [get_bd_pins translation_simple_0/w_size]
  connect_bd_net -net s_aresetn_0_1 [get_bd_ports s_aresetn_0] [get_bd_pins axi_mmu_wrapper_sync_0/s_aresetn] [get_bd_pins translation_simple_0/reset_]
  connect_bd_net -net s_axi_clk_0_1 [get_bd_ports s_axi_clk_0] [get_bd_pins axi_mmu_wrapper_sync_0/s_axi_clk] [get_bd_pins translation_simple_0/clk]
  connect_bd_net -net translation_simple_0_p_raddr [get_bd_pins axi_mmu_wrapper_sync_0/phys_rd_addr] [get_bd_pins translation_simple_0/p_raddr]
  connect_bd_net -net translation_simple_0_p_waddr [get_bd_pins axi_mmu_wrapper_sync_0/phys_wr_addr] [get_bd_pins translation_simple_0/p_waddr]
  connect_bd_net -net translation_simple_0_r_drop [get_bd_pins axi_mmu_wrapper_sync_0/rd_drop] [get_bd_pins translation_simple_0/r_drop]
  connect_bd_net -net translation_simple_0_t_rdone [get_bd_pins axi_mmu_wrapper_sync_0/rd_trans_done] [get_bd_pins translation_simple_0/t_rdone]
  connect_bd_net -net translation_simple_0_t_wdone [get_bd_pins axi_mmu_wrapper_sync_0/wr_trans_done] [get_bd_pins translation_simple_0/t_wdone]
  connect_bd_net -net translation_simple_0_w_drop [get_bd_pins axi_mmu_wrapper_sync_0/wr_drop] [get_bd_pins translation_simple_0/w_drop]

  # Create address segments

  # Exclude Address Segments
  create_bd_addr_seg -range 0x00010000 -offset 0x44A00000 [get_bd_addr_spaces axi_mmu_wrapper_sync_0/m_axi] [get_bd_addr_segs m_axi_0/Reg] SEG_m_axi_0_Reg
  exclude_bd_addr_seg [get_bd_addr_segs axi_mmu_wrapper_sync_0/m_axi/SEG_m_axi_0_Reg]

  create_bd_addr_seg -range 0x000100000000 -offset 0x00000000 [get_bd_addr_spaces s_axi_0] [get_bd_addr_segs axi_mmu_wrapper_sync_0/s_axi/reg0] SEG_axi_mmu_wrapper_sync_0_reg0
  exclude_bd_addr_seg [get_bd_addr_segs s_axi_0/SEG_axi_mmu_wrapper_sync_0_reg0]



  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_sys_mm()
cr_bd_sys_mm ""
set_property IS_MANAGED "0" [get_files sys_mm.bd ] 
set_property REGISTERED_WITH_MANAGER "1" [get_files sys_mm.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files sys_mm.bd ] 

make_wrapper -files [get_files ${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm/sys_mm.bd] -top
add_files -norecurse ${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm/hdl/sys_mm_wrapper.v

if { [get_files translator.v] == "" } {
  import_files -quiet -fileset sources_1 ../../generated_ip/mm_axi_wrapper_arty_a7/src/translator.v
}


# Proc to create BD sys_mm_tb
proc cr_bd_sys_mm_tb { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# translation_simple



  # CHANGE DESIGN NAME HERE
  set design_name sys_mm_tb

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  wuklab:user:axi_mmu_wrapper_sync:1.0\
  xilinx.com:ip:axi_traffic_gen:3.0\
  xilinx.com:ip:mig_7series:4.1\
  xilinx.com:ip:util_vector_logic:2.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  translation_simple\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }


##################################################################
# MIG PRJ FILE TCL PROCs
##################################################################

proc write_mig_file_sys_mm_tb_mig_7series_0_0 { str_mig_prj_filepath } {

   file mkdir [ file dirname "$str_mig_prj_filepath" ]
   set mig_prj_file [open $str_mig_prj_filepath  w+]

   puts $mig_prj_file {<?xml version='1.0' encoding='UTF-8'?>}
   puts $mig_prj_file {<!-- IMPORTANT: This is an internal file that has been generated by the MIG software. Any direct editing or changes made to this file may result in unpredictable behavior or data corruption. It is strongly advised that users do not edit the contents of this file. Re-run the MIG GUI with the required settings if any of the options provided below need to be altered. -->}
   puts $mig_prj_file {<Project NoOfControllers="1" >}
   puts $mig_prj_file {    <ModuleName>sys_mm_tb_mig_7series_0_0</ModuleName>}
   puts $mig_prj_file {    <dci_inouts_inputs>1</dci_inouts_inputs>}
   puts $mig_prj_file {    <dci_inputs>1</dci_inputs>}
   puts $mig_prj_file {    <Debug_En>OFF</Debug_En>}
   puts $mig_prj_file {    <DataDepth_En>1024</DataDepth_En>}
   puts $mig_prj_file {    <LowPower_En>ON</LowPower_En>}
   puts $mig_prj_file {    <XADC_En>Enabled</XADC_En>}
   puts $mig_prj_file {    <TargetFPGA>xc7a100t-csg324/-1</TargetFPGA>}
   puts $mig_prj_file {    <Version>4.1</Version>}
   puts $mig_prj_file {    <SystemClock>Differential</SystemClock>}
   puts $mig_prj_file {    <ReferenceClock>Differential</ReferenceClock>}
   puts $mig_prj_file {    <SysResetPolarity>ACTIVE LOW</SysResetPolarity>}
   puts $mig_prj_file {    <BankSelectionFlag>TRUE</BankSelectionFlag>}
   puts $mig_prj_file {    <InternalVref>0</InternalVref>}
   puts $mig_prj_file {    <dci_hr_inouts_inputs>50 Ohms</dci_hr_inouts_inputs>}
   puts $mig_prj_file {    <dci_cascade>0</dci_cascade>}
   puts $mig_prj_file {    <Controller number="0" >}
   puts $mig_prj_file {        <MemoryDevice>DDR3_SDRAM/Components/MT41K256M32SLD-125</MemoryDevice>}
   puts $mig_prj_file {        <TimePeriod>3225</TimePeriod>}
   puts $mig_prj_file {        <VccAuxIO>1.8V</VccAuxIO>}
   puts $mig_prj_file {        <PHYRatio>2:1</PHYRatio>}
   puts $mig_prj_file {        <InputClkFreq>310.077</InputClkFreq>}
   puts $mig_prj_file {        <UIExtraClocks>0</UIExtraClocks>}
   puts $mig_prj_file {        <MMCM_VCO>620</MMCM_VCO>}
   puts $mig_prj_file {        <MMCMClkOut0> 1.000</MMCMClkOut0>}
   puts $mig_prj_file {        <MMCMClkOut1>1</MMCMClkOut1>}
   puts $mig_prj_file {        <MMCMClkOut2>1</MMCMClkOut2>}
   puts $mig_prj_file {        <MMCMClkOut3>1</MMCMClkOut3>}
   puts $mig_prj_file {        <MMCMClkOut4>1</MMCMClkOut4>}
   puts $mig_prj_file {        <DataWidth>32</DataWidth>}
   puts $mig_prj_file {        <DeepMemory>1</DeepMemory>}
   puts $mig_prj_file {        <DataMask>1</DataMask>}
   puts $mig_prj_file {        <ECC>Disabled</ECC>}
   puts $mig_prj_file {        <Ordering>Normal</Ordering>}
   puts $mig_prj_file {        <BankMachineCnt>4</BankMachineCnt>}
   puts $mig_prj_file {        <CustomPart>FALSE</CustomPart>}
   puts $mig_prj_file {        <NewPartName></NewPartName>}
   puts $mig_prj_file {        <RowAddress>15</RowAddress>}
   puts $mig_prj_file {        <ColAddress>10</ColAddress>}
   puts $mig_prj_file {        <BankAddress>3</BankAddress>}
   puts $mig_prj_file {        <MemoryVoltage>1.5V</MemoryVoltage>}
   puts $mig_prj_file {        <C0_MEM_SIZE>1073741824</C0_MEM_SIZE>}
   puts $mig_prj_file {        <UserMemoryAddressMap>BANK_ROW_COLUMN</UserMemoryAddressMap>}
   puts $mig_prj_file {        <BankSelection>}
   puts $mig_prj_file {            <Bank T2="Address/Ctrl-2" name="34" T0="Address/Ctrl-0" T1="Address/Ctrl-1" />}
   puts $mig_prj_file {            <Bank T2="DQ[16-23]" T3="DQ[24-31]" name="35" T0="DQ[0-7]" T1="DQ[8-15]" />}
   puts $mig_prj_file {        </BankSelection>}
   puts $mig_prj_file {        <Reference_Clock>}
   puts $mig_prj_file {            <Pin PADName="A10/A9(CC_P/N)" Bank="16" name="clk_ref_p/n" />}
   puts $mig_prj_file {        </Reference_Clock>}
   puts $mig_prj_file {        <System_Clock>}
   puts $mig_prj_file {            <Pin PADName="N5/P5(CC_P/N)" Bank="34" name="sys_clk_p/n" />}
   puts $mig_prj_file {        </System_Clock>}
   puts $mig_prj_file {        <System_Control>}
   puts $mig_prj_file {            <Pin PADName="A11" Bank="15" name="sys_rst" />}
   puts $mig_prj_file {            <Pin PADName="A15" Bank="15" name="init_calib_complete" />}
   puts $mig_prj_file {            <Pin PADName="A18" Bank="15" name="tg_compare_error" />}
   puts $mig_prj_file {        </System_Control>}
   puts $mig_prj_file {        <TimingParameters>}
   puts $mig_prj_file {            <Parameters twtr="7.5" trrd="7.5" trefi="7.8" tfaw="40" trtp="7.5" tcke="5" trfc="260" trp="13.75" tras="35" trcd="13.75" />}
   puts $mig_prj_file {        </TimingParameters>}
   puts $mig_prj_file {        <mrBurstLength name="Burst Length" >8 - Fixed</mrBurstLength>}
   puts $mig_prj_file {        <mrBurstType name="Read Burst Type and Length" >Sequential</mrBurstType>}
   puts $mig_prj_file {        <mrCasLatency name="CAS Latency" >5</mrCasLatency>}
   puts $mig_prj_file {        <mrMode name="Mode" >Normal</mrMode>}
   puts $mig_prj_file {        <mrDllReset name="DLL Reset" >No</mrDllReset>}
   puts $mig_prj_file {        <mrPdMode name="DLL control for precharge PD" >Slow Exit</mrPdMode>}
   puts $mig_prj_file {        <emrDllEnable name="DLL Enable" >Enable</emrDllEnable>}
   puts $mig_prj_file {        <emrOutputDriveStrength name="Output Driver Impedance Control" >RZQ/7</emrOutputDriveStrength>}
   puts $mig_prj_file {        <emrMirrorSelection name="Address Mirroring" >Disable</emrMirrorSelection>}
   puts $mig_prj_file {        <emrCSSelection name="Controller Chip Select Pin" >Enable</emrCSSelection>}
   puts $mig_prj_file {        <emrRTT name="RTT (nominal) - On Die Termination (ODT)" >RZQ/4</emrRTT>}
   puts $mig_prj_file {        <emrPosted name="Additive Latency (AL)" >0</emrPosted>}
   puts $mig_prj_file {        <emrOCD name="Write Leveling Enable" >Disabled</emrOCD>}
   puts $mig_prj_file {        <emrDQS name="TDQS enable" >Enabled</emrDQS>}
   puts $mig_prj_file {        <emrRDQS name="Qoff" >Output Buffer Enabled</emrRDQS>}
   puts $mig_prj_file {        <mr2PartialArraySelfRefresh name="Partial-Array Self Refresh" >Full Array</mr2PartialArraySelfRefresh>}
   puts $mig_prj_file {        <mr2CasWriteLatency name="CAS write latency" >5</mr2CasWriteLatency>}
   puts $mig_prj_file {        <mr2AutoSelfRefresh name="Auto Self Refresh" >Enabled</mr2AutoSelfRefresh>}
   puts $mig_prj_file {        <mr2SelfRefreshTempRange name="High Temparature Self Refresh Rate" >Normal</mr2SelfRefreshTempRange>}
   puts $mig_prj_file {        <mr2RTTWR name="RTT_WR - Dynamic On Die Termination (ODT)" >Dynamic ODT off</mr2RTTWR>}
   puts $mig_prj_file {        <PortInterface>AXI</PortInterface>}
   puts $mig_prj_file {        <AXIParameters>}
   puts $mig_prj_file {            <C0_C_RD_WR_ARB_ALGORITHM>RD_PRI_REG</C0_C_RD_WR_ARB_ALGORITHM>}
   puts $mig_prj_file {            <C0_S_AXI_ADDR_WIDTH>30</C0_S_AXI_ADDR_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_DATA_WIDTH>128</C0_S_AXI_DATA_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_ID_WIDTH>4</C0_S_AXI_ID_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_SUPPORTS_NARROW_BURST>1</C0_S_AXI_SUPPORTS_NARROW_BURST>}
   puts $mig_prj_file {        </AXIParameters>}
   puts $mig_prj_file {    </Controller>}
   puts $mig_prj_file {</Project>}

   close $mig_prj_file
}
# End of write_mig_file_sys_mm_tb_mig_7series_0_0()



  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set DDR3_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 DDR3_0 ]

  # Create ports
  set clk_ref_n_0 [ create_bd_port -dir I -type clk clk_ref_n_0 ]
  set clk_ref_p_0 [ create_bd_port -dir I -type clk clk_ref_p_0 ]
  set core_ext_start_0 [ create_bd_port -dir I core_ext_start_0 ]
  set core_ext_stop_0 [ create_bd_port -dir I core_ext_stop_0 ]
  set init_calib_complete_0 [ create_bd_port -dir O init_calib_complete_0 ]
  set sys_clk_n_0 [ create_bd_port -dir I -type clk sys_clk_n_0 ]
  set sys_clk_p_0 [ create_bd_port -dir I -type clk sys_clk_p_0 ]
  set sys_rst_0 [ create_bd_port -dir I -type rst sys_rst_0 ]

  # Create instance: axi_mmu_wrapper_sync_0, and set properties
  set axi_mmu_wrapper_sync_0 [ create_bd_cell -type ip -vlnv wuklab:user:axi_mmu_wrapper_sync:1.0 axi_mmu_wrapper_sync_0 ]
  set_property -dict [ list \
   CONFIG.AR_BUF_SZ {16} \
   CONFIG.AW_BUF_SZ {16} \
   CONFIG.AXI_ARUSER_WIDTH {1} \
   CONFIG.AXI_AWUSER_WIDTH {1} \
   CONFIG.AXI_BUSER_WIDTH {1} \
   CONFIG.AXI_DATA_WIDTH {128} \
   CONFIG.AXI_ID_WIDTH {4} \
   CONFIG.AXI_RUSER_WIDTH {1} \
   CONFIG.AXI_STRB_WIDTH {16} \
   CONFIG.AXI_WUSER_WIDTH {1} \
 ] $axi_mmu_wrapper_sync_0

  set_property CONFIG.CLK_DOMAIN sys_mm_tb_mig_7series_0_0_ui_clk [get_bd_intf_pins /axi_mmu_wrapper_sync_0/s_axi]
  set_property CONFIG.CLK_DOMAIN sys_mm_tb_mig_7series_0_0_ui_clk [get_bd_intf_pins /axi_mmu_wrapper_sync_0/m_axi]
  set_property CONFIG.FREQ_HZ 155038760 [get_bd_intf_pins /axi_mmu_wrapper_sync_0/s_axi]
  set_property CONFIG.FREQ_HZ 155038760 [get_bd_intf_pins /axi_mmu_wrapper_sync_0/m_axi]

  # Create instance: axi_traffic_gen_0, and set properties
  set axi_traffic_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_traffic_gen:3.0 axi_traffic_gen_0 ]
  set_property -dict [ list \
   CONFIG.ATG_HLT_STATIC_LENGTH {256} \
   CONFIG.DATA_SIZE_AVG {16} \
   CONFIG.ATG_OPTIONS {High Level Traffic} \
   CONFIG.C_ATG_REPEAT_TYPE {One_Shot} \
   CONFIG.DATA_TRANS_GAP {Random} \
   CONFIG.DATA_TRAFFIC_PATTERN {Fixed} \
   CONFIG.ETHERNET_LOAD {75} \
   CONFIG.C_ATG_STATIC_HLTP_INCR {true} \
   CONFIG.MASTER_AXI_WIDTH {128} \
   CONFIG.MASTER_HIGH_ADDRESS {0x00FFFFFF} \
   CONFIG.TRAFFIC_PROFILE {Data} \
 ] $axi_traffic_gen_0

  # Create instance: mig_7series_0, and set properties
  set mig_7series_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mig_7series:4.1 mig_7series_0 ]

  # Generate the PRJ File for MIG
  set str_mig_folder [get_property IP_DIR [ get_ips [ get_property CONFIG.Component_Name $mig_7series_0 ] ] ]
  set str_mig_file_name mig_a.prj
  set str_mig_file_path ${str_mig_folder}/${str_mig_file_name}

  write_mig_file_sys_mm_tb_mig_7series_0_0 $str_mig_file_path

  set_property -dict [ list \
   CONFIG.BOARD_MIG_PARAM {Custom} \
   CONFIG.MIG_DONT_TOUCH_PARAM {Custom} \
   CONFIG.RESET_BOARD_INTERFACE {Custom} \
   CONFIG.XML_INPUT_FILE {mig_a.prj} \
 ] $mig_7series_0

  # Create instance: translation_simple_0, and set properties
  set block_name translation_simple
  set block_cell_name translation_simple_0
  if { [catch {set translation_simple_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $translation_simple_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_0 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_mmu_wrapper_sync_0_m_axi [get_bd_intf_pins axi_mmu_wrapper_sync_0/m_axi] [get_bd_intf_pins mig_7series_0/S_AXI]
  connect_bd_intf_net -intf_net axi_traffic_gen_0_M_AXI [get_bd_intf_pins axi_mmu_wrapper_sync_0/s_axi] [get_bd_intf_pins axi_traffic_gen_0/M_AXI]
  connect_bd_intf_net -intf_net mig_7series_0_DDR3 [get_bd_intf_ports DDR3_0] [get_bd_intf_pins mig_7series_0/DDR3]

  # Create port connections
  connect_bd_net -net Net [get_bd_pins axi_mmu_wrapper_sync_0/s_axi_clk] [get_bd_pins axi_traffic_gen_0/s_axi_aclk] [get_bd_pins mig_7series_0/ui_clk] [get_bd_pins translation_simple_0/clk]
  connect_bd_net -net Net1 [get_bd_pins axi_mmu_wrapper_sync_0/s_aresetn] [get_bd_pins axi_traffic_gen_0/s_axi_aresetn] [get_bd_pins mig_7series_0/aresetn] [get_bd_pins translation_simple_0/reset_] [get_bd_pins util_vector_logic_0/Res]
  connect_bd_net -net axi_mmu_wrapper_sync_0_start_rd_translation [get_bd_pins axi_mmu_wrapper_sync_0/start_rd_translation] [get_bd_pins translation_simple_0/rstart]
  connect_bd_net -net axi_mmu_wrapper_sync_0_start_wr_translation [get_bd_pins axi_mmu_wrapper_sync_0/start_wr_translation] [get_bd_pins translation_simple_0/wstart]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_addr [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_addr] [get_bd_pins translation_simple_0/v_raddr]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_len [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_len] [get_bd_pins translation_simple_0/r_len]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_rd_size [get_bd_pins axi_mmu_wrapper_sync_0/virt_rd_size] [get_bd_pins translation_simple_0/r_size]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_addr [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_addr] [get_bd_pins translation_simple_0/v_waddr]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_len [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_len] [get_bd_pins translation_simple_0/w_len]
  connect_bd_net -net axi_mmu_wrapper_sync_0_virt_wr_size [get_bd_pins axi_mmu_wrapper_sync_0/virt_wr_size] [get_bd_pins translation_simple_0/w_size]
  connect_bd_net -net clk_ref_n_0_1 [get_bd_ports clk_ref_n_0] [get_bd_pins mig_7series_0/clk_ref_n]
  connect_bd_net -net clk_ref_p_0_1 [get_bd_ports clk_ref_p_0] [get_bd_pins mig_7series_0/clk_ref_p]
  connect_bd_net -net core_ext_start_0_1 [get_bd_ports core_ext_start_0] [get_bd_pins axi_traffic_gen_0/core_ext_start]
  connect_bd_net -net mig_7series_0_init_calib_complete [get_bd_ports init_calib_complete_0] [get_bd_pins mig_7series_0/init_calib_complete]
  connect_bd_net -net mig_7series_0_ui_clk_sync_rst [get_bd_pins mig_7series_0/ui_clk_sync_rst] [get_bd_pins util_vector_logic_0/Op1]
  connect_bd_net -net sys_clk_n_0_1 [get_bd_ports sys_clk_n_0] [get_bd_pins mig_7series_0/sys_clk_n]
  connect_bd_net -net sys_clk_p_0_1 [get_bd_ports sys_clk_p_0] [get_bd_pins mig_7series_0/sys_clk_p]
  connect_bd_net -net sys_rst_0_1 [get_bd_ports sys_rst_0] [get_bd_pins mig_7series_0/sys_rst]
  connect_bd_net -net translation_simple_0_p_raddr [get_bd_pins axi_mmu_wrapper_sync_0/phys_rd_addr] [get_bd_pins translation_simple_0/p_raddr]
  connect_bd_net -net translation_simple_0_p_waddr [get_bd_pins axi_mmu_wrapper_sync_0/phys_wr_addr] [get_bd_pins translation_simple_0/p_waddr]
  connect_bd_net -net translation_simple_0_r_drop [get_bd_pins axi_mmu_wrapper_sync_0/rd_drop] [get_bd_pins translation_simple_0/r_drop]
  connect_bd_net -net translation_simple_0_t_rdone [get_bd_pins axi_mmu_wrapper_sync_0/rd_trans_done] [get_bd_pins translation_simple_0/t_rdone]
  connect_bd_net -net translation_simple_0_t_wdone [get_bd_pins axi_mmu_wrapper_sync_0/wr_trans_done] [get_bd_pins translation_simple_0/t_wdone]
  connect_bd_net -net translation_simple_0_w_drop [get_bd_pins axi_mmu_wrapper_sync_0/wr_drop] [get_bd_pins translation_simple_0/w_drop]

  # Create address segments
  create_bd_addr_seg -range 0x000100000000 -offset 0x00000000 [get_bd_addr_spaces axi_traffic_gen_0/Data] [get_bd_addr_segs axi_mmu_wrapper_sync_0/s_axi/reg0] SEG_axi_mmu_wrapper_sync_0_reg0


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_sys_mm_tb()
cr_bd_sys_mm_tb ""
set_property IS_MANAGED "0" [get_files sys_mm_tb.bd ] 
set_property REGISTERED_WITH_MANAGER "1" [get_files sys_mm_tb.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files sys_mm_tb.bd ] 
set_property USED_IN "simulation" [get_files sys_mm_tb.bd ] 
set_property USED_IN_IMPLEMENTATION "0" [get_files sys_mm_tb.bd ] 
set_property USED_IN_SYNTHESIS "0" [get_files sys_mm_tb.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a100tcsg324-1 -flow {Vivado Synthesis 2018} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2018" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a100tcsg324-1 -flow {Vivado Implementation 2018} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2018" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj

make_wrapper -files [get_files $origin_dir/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm_tb/sys_mm_tb.bd] -inst_template 
add_files -norecurse ${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm_tb/hdl/sys_mm_tb_wrapper.v

set file ${origin_dir}/generated_tb/mm_sys_mm.srcs/sources_1/bd/sys_mm_tb/hdl/sys_mm_tb_wrapper.v
set file_obj [get_files -of_objects [get_filesets sources_1] [list "$file"]]
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_implementation" -value "0" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
exit
